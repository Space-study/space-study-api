services:
  postgres:
    container_name: space-study-postgres
    image: postgres:17.0-alpine
    ports:
      - ${DATABASE_PORT}:5432
    volumes:
      - space-study-db:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${DATABASE_USERNAME}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_DB: ${DATABASE_NAME}
    networks:
      - postgres-network

  maildev:
    container_name: space-study-maildev
    build:
      context: .
      dockerfile: maildev.Dockerfile
    ports:
      - ${MAIL_CLIENT_PORT}:1080
      - ${MAIL_PORT}:1025

  pgadmin:
    container_name: space-study-api-pgadmin
    image: dpage/pgadmin4
    env_file:
      - .env
    ports:
      - '5050:80'
    depends_on:
      - postgres
    networks:
      - postgres-network

  redis:
    container_name: space-study-api-redis
    image: 'redis:alpine'
    volumes:
      - space-study-api-redis:/data
    ports:
      - 6379:6379

  zipkin-all-in-one:
    container_name: space-study-api-zipkin-all-in-one
    image: openzipkin/zipkin:latest
    ports:
      - '9411:9411'
    env_file:
      - .env

  prometheus:
    container_name: space-study-api-prometheus
    image: prom/prometheus:v2.47.0
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--enable-feature=otlp-write-receiver'
      - '--enable-feature=exemplar-storage'
    env_file:
      - .env
    ports:
      - '9092:9090'
    volumes:
      - .docker/prometheus/config.yml:/etc/prometheus/prometheus.yml
  collector:
    container_name: space-study-api-collector
    image: otel/opentelemetry-collector-contrib:latest
    command: ['--config=/conf/collector-config.yaml']
    volumes:
      - .docker/collector/collector-config.yaml:/conf/collector-config.yaml
    ports:
      - '9464:9464'
      - '4317:4317'
      - '4318:4318'
    depends_on:
      - zipkin-all-in-one

  # api:
  #   container_name: space-study-services
  #   build:
  #     context: .
  #     dockerfile: Dockerfile
  #   ports:
  #     - ${APP_PORT}:${APP_PORT}

  minio:
    image: minio/minio:latest
    container_name: space-study-minio
    restart: unless-stopped
    ports:
      - "9090:9000"
      - "9091:9001"
    env_file:
      - .env
    volumes:
      - minio_data:/data
      - minio_config:/root/.minio
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # rabbitmq:
  #       container_name: space-study-rabbitmq
  #       image: rabbitmq:3.13.1-management-alpine
  #       env_file: .env
  #       restart: unless-stopped
  #       depends_on:
  #           - proxy
  #       environment:
  #           - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}
  #           - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}
  #       volumes:
  #           - rabbitmq-data:/var/lib/rabbitmq/mnesia/
  #       healthcheck:
  #         test: rabbitmq-diagnostics check_port_connectivity
  #         interval: 30s
  #         timeout: 30s
  #         retries: 10


volumes:
  space-study-api-redis:
  space-study-db:
  rabbitmq-data:
  minio_data:
  minio_config:

networks:
  postgres-network:
    driver: bridge


